name: Build

on: [push, pull_request]

jobs:
  portable:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-latest]
        python-version: ["3.10"]

    # on a new tag (release), after 'test' and 'release' have ended we will run this
    # TODO: undo after testing
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    # needs: [test, release]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Wait for pip release, sleep in seconds
        run: sleep 1
        shell: bash

      - name: Setup Portable
        run: pip install pyinstaller lean
        shell: bash

      - name: Create Portable
        run: |
          mkdir portable
          cd portable
          pyinstaller ../scripts/main.spec
        shell: bash

      - name: Get OS name
        run: |
          os_name=$(echo ${{ matrix.os }} | sed 's/-latest//')
          echo "The OS name is ${os_name}"

      - name: Get OS Name
        run: | 
          export os_name=matrix.os.os
          echo "REPOSITORY_NAME=$(echo ${{ matrix.os }} | sed 's/-latest//')" >> $GITHUB_ENV
        shell: bash

      - name: Debug
        run: | 
          echo ${{env.os_name}} ${{matrix.os.os}}
          echo ${{env.REPOSITORY_NAME}}

      - name: Zip package Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd portable/dist/lean
          7z a -tzip ../lean-latest-${os_name}.zip .
          7z a -tzip ../lean-test1-${{ matrix.os }}.zip .
        shell: bash

      - name: Zip package Macos
        if: matrix.os == 'macos-12'
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: 'KEYCHAINPASSWORD'
        run: |
          echo $MACOS_CERTIFICATE | base64 â€”decode > certificate.p12
          security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD build.keychain
          security find-identity -v 
          cd portable/dist/lean
          zip -r ../lean-latest-${os_name}.zip .
          zip -r ../lean-test1-${{ matrix.os }}.zip .

      - name: Zip package Ubuntu
        if: matrix.os == 'ubuntu-22.04'
        run: |
          cd portable/dist/lean
          zip -r ../lean-latest-${os_name}.zip .
          zip -r ../lean-test1-${{ matrix.os }}.zip .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: us-west-1

      - name: Publish To S3
        run: |
          aws s3 cp portable/dist/lean-latest-${os_name}.zip s3://${{ secrets.AWS_BUCKET }}/ --content-type "application/zip"
          aws s3 cp portable/dist/lean-test1-${{ matrix.os }}.zip s3://${{ secrets.AWS_BUCKET }}/${os_name}/ --content-type "application/zip"
        shell: bash

      # only update version file once. 
      - name: Update version information
        if: matrix.os == 'ubuntu-22.04'
        run: |
          echo '{ "version": 1.2 }' > portable/latest.json
          aws s3 cp portable/latest.json s3://${{ secrets.AWS_BUCKET }}/ --content-type "text/plain"
        shell: bash

      - name: Cleanup
        run: |
          rm -rf portable
        shell: bash